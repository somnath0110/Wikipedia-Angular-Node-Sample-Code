{"version":3,"sources":["../../src/api/index.js"],"names":["config","api","get","req","res","options","method","uri","wikipedia_baseURL","json","then","parseBody","sections","remaining","length","sectionText","text","HtmlTableToJson","require","jsonTables","result","results","JSON","parse","stringify","split","join","catch","err","console","log","query","params","name","wikipedia_detailUrl","convert","group","href","html","html1","data","rank","population","city_url","slice"],"mappings":"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","file":"index.js","sourcesContent":["import { Router } from 'express';\nimport request from 'request-promise';\n\nexport default ({ config }) => {\n\tlet api = Router();\n\t/**\n\t * REST API to get the List of metropolitan areas in Asia\n\t */\n\tapi.get('/', (req, res) => {\n\t\tlet options = {\n\t\t\tmethod: 'GET',\n\t\t\turi: config.wikipedia_baseURL+'/page/mobile-sections/List_of_metropolitan_areas_in_Asia',\n\t\t\tjson: true\n\t\t};\n\t\trequest(options)\n\t\t\t.then((parseBody) => {\n\t\t\t\tconst sections =  parseBody.remaining.sections;\n\t\t\t\tif(sections.length > 1){\n\t\t\t\t\tconst sectionText = sections[0].text;\n\t\t\t\t\tconst HtmlTableToJson = require('html-table-to-json');\n\t\t\t\t\tconst jsonTables = new HtmlTableToJson(sectionText);\n\t\t\t\t\tconst result = jsonTables.results && jsonTables.results[0];\n\t\t\t\t\tconst json = JSON.parse(JSON.stringify(result).split('\"MetroPopulation(2017 est.)[1]\":').join('\"Population\":'));\n\t\t\t\t\tres.json(json);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err)=> {\n\t\t\t\tconsole.log(err);\n\t\t\t\tres.json({ err: err });\n\t\t\t});\n\t\t\n\t});\n\tapi.get('/details/:name', (req, res) => {\n\t\tlet query = req.params.name;\n\t\tconsole.log(query)\n\t\tlet options = {\n\t\t\tmethod: 'GET',\n\t\t\turi: config.wikipedia_detailUrl+query,\n\t\t\t\n\t\t\tjson: true\n\t\t};\n\t\tconsole.log(options.uri)\n\t\trequest(options)\n\t\t\t.then((parseBody) => {\n\t\t\t\tconst sections =  parseBody.remaining.sections;\n\t\t\t\tif(sections.length > 1){\n\t\t\t\t\tconst sectionText = sections[0].text;\n\t\t\t\t\tconst HtmlTableToJson = require('html-table-to-json');\n\t\t\t\t\tconst jsonTables = new HtmlTableToJson(sectionText);\n\t\t\t\t\tconst result = jsonTables.results && jsonTables.results[0];\n\t\t\t\t\tres.json(json);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err)=> {\n\t\t\t\tconsole.log(err);\n\t\t\t\tres.json({ err: err });\n\t\t\t});\n\t\t\n\t});\n\n\tapi.get('/getImages', (req, res) => {\n\n\t\tconst convert = require('html-to-json-data');\n\t\tconst {\n\t\t\tgroup,\n\t\t\ttext,\n\t\t\thref\n\t\t} = require('html-to-json-data/definitions');\n\n\t\tlet options = {\n\t\t\tmethod: 'GET',\n\t\t\turi: config.wikipedia_detailUrl+'Delhi',\n\t\t\tjson: true\n\t\t};\n\t\trequest(options)\n\t\t\t.then((parseBody) => {\n\t\t\t\tconst sections = parseBody.remaining.sections;\n\t\t\t\tif (sections.length > 1) {\n\t\t\t\t\tconst sectionText = sections[0].text;\n\t\t\t\t\tconst html = sectionText;\n\t\t\t\t\tconst html1= `<table class=\"sortable wikitable\"><tbody>\n\t\t\t\t\t<tr bgcolor=\"#79ff76\">\n\t\t\t\t\t\t\t<td align=\"center\"><b>1</b></td>\n\t\t\t\t\t\t\t<td align=\"center\">\n\t\t\t\t\t\t\t\t<a href=\"/wiki/Greater_Tokyo_Area\" title=\"Greater Tokyo Area\">Tokyo</a></td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<figure-inline><a href=\"/wiki/File:Skyscrapers_of_Shinjuku_2009_January.jpg\" class=\"image\"><img src=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Skyscrapers_of_Shinjuku_2009_January.jpg/200px-Skyscrapers_of_Shinjuku_2009_January.jpg\"\n\t\t\t\t\t\t\t\t\t\tdata-file-width=\"2560\" data-file-height=\"1364\" data-file-type=\"bitmap\" height=\"107\"\n\t\t\t\t\t\t\t\t\t\twidth=\"200\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Skyscrapers_of_Shinjuku_2009_January.jpg/400px-Skyscrapers_of_Shinjuku_2009_January.jpg\n\t\t\t\t\t\t\t\t\t\t2x,\n\t\t\t\t\t\t\t\t\t\t//upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Skyscrapers_of_Shinjuku_2009_January.jpg/300px-Skyscrapers_of_Shinjuku_2009_January.jpg\n\t\t\t\t\t\t\t\t\t\t1.5x\"></a></figure-inline>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td align=\"center\"><span class=\"flagicon\">\n\t\t\t\t\t\t\t\t<figure-inline class=\"mw-image-border\"><span><img src=\"//upload.wikimedia.org/wikipedia/en/thumb/9/9e/Flag_of_Japan.svg/23px-Flag_of_Japan.svg.png\"\n\t\t\t\t\t\t\t\t\t\t\tdata-file-width=\"900\" data-file-height=\"600\" data-file-type=\"drawing\" height=\"15\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"23\" srcset=\"//upload.wikimedia.org/wikipedia/en/thumb/9/9e/Flag_of_Japan.svg/45px-Flag_of_Japan.svg.png\n\t\t\t\t\t\t\t\t\t\t\t2x,\n\t\t\t\t\t\t\t\t\t\t\t//upload.wikimedia.org/wikipedia/en/thumb/9/9e/Flag_of_Japan.svg/35px-Flag_of_Japan.svg.png\n\t\t\t\t\t\t\t\t\t\t\t1.5x\"></span></figure-inline><span>&nbsp;</span>\n\t\t\t\t\t\t\t</span><a href=\"/wiki/Japan\" title=\"Japan\">Japan</a></td><td align=\"center\"><b>39,800,000</b></td><td\n\t\t\t\t\t\t\talign=\"center\">37,900,000</td><td align=\"center\">38,140,000<span class=\"mw-ref\" id=\"cite_ref-MA_5-0\"><a\n\t\t\t\t\t\t\t\t\thref=\"#cite_note-MA-5\" style=\"counter-reset: mw-Ref 5;\"><span class=\"mw-reflink-text\">[5]</span></a></span></td><td\n\t\t\t\t\t\t\talign=\"center\">37,843,000</td><td align=\"center\">31,714,000<span class=\"mw-ref\" id=\"cite_ref-Japan_6-0\"><a\n\t\t\t\t\t\t\t\t\thref=\"#cite_note-Japan-6\" style=\"counter-reset: mw-Ref 6;\"><span class=\"mw-reflink-text\">[6]</span></a></span></td><td\n\t\t\t\t\t\t\talign=\"center\">2005</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>`\n\t\t\t\t\tconst json = convert(html, {\n\t\t\t\t\t\tdata: group('.wikitable tr', {\n\t\t\t\t\t\t\trank: text('td td'),\n\t\t\t\t\t\t\tpopulation: text('td b'),\n\t\t\t\t\t\t\tname: text('td a'),\n\t\t\t\t\t\t\tcity_url: href('td a', 'https://en.wikipedia.org'),\n\t\t\t\t\t\t\t//link: href('h3 a', 'https://github.com'),\n\t\t\t\t\t\t\t//stars: number('a[href$=\"stargazers\"]'),\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\n\t\t\t\t\tlet results = json.data.slice(1);\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tresults: results\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\tres.json({\n\t\t\t\t\terr: err\n\t\t\t\t});\n\t\t\t});\n\t});\n\treturn api;\n}"]}